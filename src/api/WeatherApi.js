/**
 * TempApi
 * This is a sample openApi document
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: lampralexandros@gmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Weather from '../model/Weather';

/**
* Weather service.
* @module api/WeatherApi
* @version 1.0.0
*/
export default class WeatherApi {

    /**
    * Constructs a new WeatherApi. 
    * @alias module:api/WeatherApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createweather operation.
     * @callback module:api/WeatherApi~createweatherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Weather} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates the data
     * @param {module:model/Weather} weather data to be created
     * @param {module:api/WeatherApi~createweatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Weather}
     */
    createweather(weather, callback) {
      let postBody = weather;
      // verify the required parameter 'weather' is set
      if (weather === undefined || weather === null) {
        throw new Error("Missing the required parameter 'weather' when calling createweather");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Weather;
      return this.apiClient.callApi(
        '/weather', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteweather operation.
     * @callback module:api/WeatherApi~deleteweatherCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete the element
     * @param {String} weatherId the Id parameter
     * @param {module:api/WeatherApi~deleteweatherCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteweather(weatherId, callback) {
      let postBody = null;
      // verify the required parameter 'weatherId' is set
      if (weatherId === undefined || weatherId === null) {
        throw new Error("Missing the required parameter 'weatherId' when calling deleteweather");
      }

      let pathParams = {
        'weatherId': weatherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/weather/{weatherId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllweather operation.
     * @callback module:api/WeatherApi~getAllweatherCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Weather>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the data
     * @param {module:api/WeatherApi~getAllweatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Weather>}
     */
    getAllweather(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Weather];
      return this.apiClient.callApi(
        '/weather/getAll', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getweather operation.
     * @callback module:api/WeatherApi~getweatherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Weather} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the element
     * @param {String} weatherId the Id parameter
     * @param {module:api/WeatherApi~getweatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Weather}
     */
    getweather(weatherId, callback) {
      let postBody = null;
      // verify the required parameter 'weatherId' is set
      if (weatherId === undefined || weatherId === null) {
        throw new Error("Missing the required parameter 'weatherId' when calling getweather");
      }

      let pathParams = {
        'weatherId': weatherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Weather;
      return this.apiClient.callApi(
        '/weather/{weatherId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateweather operation.
     * @callback module:api/WeatherApi~updateweatherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Weather} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates the element
     * @param {String} weatherId the Id parameter
     * @param {Object} opts Optional parameters
     * @param {module:model/Weather} opts.weather data to be updated
     * @param {module:api/WeatherApi~updateweatherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Weather}
     */
    updateweather(weatherId, opts, callback) {
      opts = opts || {};
      let postBody = opts['weather'];
      // verify the required parameter 'weatherId' is set
      if (weatherId === undefined || weatherId === null) {
        throw new Error("Missing the required parameter 'weatherId' when calling updateweather");
      }

      let pathParams = {
        'weatherId': weatherId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Weather;
      return this.apiClient.callApi(
        '/weather/{weatherId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
